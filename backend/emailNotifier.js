const { MongoClient } = require('mongodb');
const nodemailer = require('nodemailer');
require('dotenv').config();

const mongoClient = new MongoClient(process.env.MONGODB_URI);

async function sendEmail(to, subject, text) {
  let transporter = nodemailer.createTransport({
    host: 'smtp.sendgrid.net',
    port: 587,
    auth: {
      user: 'apikey', 
      pass: process.env.SENDGRID_API_KEY
    }
  });

  let mailOptions = {
    from: process.env.SENDING_EMAIL,
    to: to,
    subject: subject,
    text: text
  };

  try {
    await transporter.sendMail(mailOptions);
  } catch (error) {
    console.error(`Failed to send email to ${to}: ${error}`);
    throw error; // Re-throw the error to be caught in the calling function
  }
}

async function monitorAndSendEmails() {
  try {
    await mongoClient.connect();

    const onboardingDb = mongoClient.db('onboarding');
    const sessionsCollection = onboardingDb.collection('sessions');
    const marketingDb = mongoClient.db('marketing_agent');
    const judgeDataCollection = mongoClient.db('judge_data');

    const sessions = await sessionsCollection.find({ emailSent: { $ne: true } }).toArray();

    for (const session of sessions) {
      const businessName = session.businessInfo.name;
      const email = session.businessInfo.email;

      const collections = await marketingDb.listCollections().toArray();
      const marketingData = await marketingDb.collection(businessName).findOne();
      const judgeData = await judgeDataCollection.collection(businessName).findOne();

      if (marketingData && judgeData) {
        const emailContent = `
          Hello ${businessName},

          Here is the information generated by our AI agents:

          Business Description:
          ${marketingData.business.description}

          User Personas:
          ${marketingData.user_personas.map(persona => `${persona.persona_name}: ${persona.details}`).join('\n')}

          Research Paths:
          ${marketingData.list_of_paths_taken.join('\n')}

          Keywords:
          ${Array.isArray(judgeData.keywords) ? judgeData.keywords.join('\n') : 'No keywords available'}

          Ad Text Variations:
          ${Array.isArray(judgeData.ad_variations) ? judgeData.ad_variations.join('\n') : 'No ad variations available'}

          If you would like to use AdAlchemyAI to automate your ads, let's schedule some time to chat:
          https://calendly.com/emmanuel-emmanuelsibanda/30min

          Best regards,
          Emmanuel from AdAlchemyAI
        `;

        await sendEmail(email, 'AdAlchemyAI: Results to automate your Google Ads', emailContent);

        await sessionsCollection.updateOne(
          { _id: session._id },
          { $set: { emailSent: true } }
        );
      } else {
        console.log(`Missing data for ${businessName}. Marketing data: ${!!marketingData}, Judge data: ${!!judgeData}`);
      }
    }
  } catch (error) {
    console.error(`Error monitoring and sending emails: ${error}`);
  } finally {
    await mongoClient.close();
  }
}

async function runEmailNotifier() {
  try {
    await monitorAndSendEmails();
  } catch (error) {
    console.error('Error running email notifier:', error);
  }
}

// Execute the function when the script is run directly
if (require.main === module) {
  runEmailNotifier();
}

module.exports = { monitorAndSendEmails };